
maze2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000145  00000000  00000000  00000129  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d5  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000018d  00000000  00000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ae  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	30 c0       	rjmp	.+96     	; 0x96 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define F_CPU 8000000UL // define cpu frequency for delay function
#include <avr/io.h>
#include <util/delay.h>
int main()
{
  38:	1f 93       	push	r17
	DDRB=0XFF; //PORTB as output Port connected to motors
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	87 bb       	out	0x17, r24	; 23
	DDRC=0X00; //PORTC Input port connected to Sensors
  3e:	14 ba       	out	0x14, r1	; 20
		int LS=PINC&0b00000001;	// mask PC0 bit of Port C
		int CS=PINC&0b00000010;	// mask PC1 bit of Port C
		int RS=PINC&0b00000100;	// mask PC2 bit of Port C

		if(LS==0b00000000)		//L(C0)=black
		PORTB=0b00001100;		//LF(B1)=0 LB(B2)=1 RF(B3)=1 RB(B4)=0
  40:	ac e0       	ldi	r26, 0x0C	; 12
		if(LS==0b00000001 && CS==0b00000000)		//L=white C=black
		PORTB=0b00001010;		//LF(B1)=1 LB(B2)=0 RF(B3)=1 RB(B4)=0
		
		if(LS==0b00000001 && CS==0b00000010 && RS==0b00000000)		//L=white C=white R=black
		{
			PORTB=0b00010010;	//LF(B1)=1 LB(B2)=0 RF(B3)=0 RB(B4)=1
  42:	12 e1       	ldi	r17, 0x12	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  44:	68 ec       	ldi	r22, 0xC8	; 200
  46:	70 e0       	ldi	r23, 0x00	; 0

		if(LS==0b00000000)		//L(C0)=black
		PORTB=0b00001100;		//LF(B1)=0 LB(B2)=1 RF(B3)=1 RB(B4)=0
		
		if(LS==0b00000001 && CS==0b00000000)		//L=white C=black
		PORTB=0b00001010;		//LF(B1)=1 LB(B2)=0 RF(B3)=1 RB(B4)=0
  48:	ba e0       	ldi	r27, 0x0A	; 10
	DDRB=0XFF; //PORTB as output Port connected to motors
	DDRC=0X00; //PORTC Input port connected to Sensors

	while(1) // infinite loop
	{
		int LS=PINC&0b00000001;	// mask PC0 bit of Port C
  4a:	83 b3       	in	r24, 0x13	; 19
		int CS=PINC&0b00000010;	// mask PC1 bit of Port C
  4c:	93 b3       	in	r25, 0x13	; 19
  4e:	29 2f       	mov	r18, r25
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	22 70       	andi	r18, 0x02	; 2
  54:	30 70       	andi	r19, 0x00	; 0
		int RS=PINC&0b00000100;	// mask PC2 bit of Port C
  56:	93 b3       	in	r25, 0x13	; 19
  58:	49 2f       	mov	r20, r25
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	44 70       	andi	r20, 0x04	; 4
  5e:	50 70       	andi	r21, 0x00	; 0

		if(LS==0b00000000)		//L(C0)=black
  60:	80 ff       	sbrs	r24, 0
  62:	17 c0       	rjmp	.+46     	; 0x92 <__SREG__+0x53>
		PORTB=0b00001100;		//LF(B1)=0 LB(B2)=1 RF(B3)=1 RB(B4)=0
		
		if(LS==0b00000001 && CS==0b00000000)		//L=white C=black
  64:	21 15       	cp	r18, r1
  66:	31 05       	cpc	r19, r1
  68:	11 f4       	brne	.+4      	; 0x6e <__SREG__+0x2f>
		PORTB=0b00001010;		//LF(B1)=1 LB(B2)=0 RF(B3)=1 RB(B4)=0
  6a:	b8 bb       	out	0x18, r27	; 24
  6c:	ee cf       	rjmp	.-36     	; 0x4a <__SREG__+0xb>
		
		if(LS==0b00000001 && CS==0b00000010 && RS==0b00000000)		//L=white C=white R=black
  6e:	22 30       	cpi	r18, 0x02	; 2
  70:	31 05       	cpc	r19, r1
  72:	59 f7       	brne	.-42     	; 0x4a <__SREG__+0xb>
  74:	41 15       	cp	r20, r1
  76:	51 05       	cpc	r21, r1
  78:	49 f4       	brne	.+18     	; 0x8c <__SREG__+0x4d>
		{
			PORTB=0b00010010;	//LF(B1)=1 LB(B2)=0 RF(B3)=0 RB(B4)=1
  7a:	18 bb       	out	0x18, r17	; 24
  7c:	80 e1       	ldi	r24, 0x10	; 16
  7e:	97 e2       	ldi	r25, 0x27	; 39
  80:	fb 01       	movw	r30, r22
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <__SREG__+0x43>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  88:	d9 f7       	brne	.-10     	; 0x80 <__SREG__+0x41>
  8a:	df cf       	rjmp	.-66     	; 0x4a <__SREG__+0xb>
			_delay_ms(1000);
		}
		if(LS==0b00000001 && CS==0b00000010 && RS==0b00000100)		//L=white C=white R=white
  8c:	44 30       	cpi	r20, 0x04	; 4
  8e:	51 05       	cpc	r21, r1
  90:	e1 f6       	brne	.-72     	; 0x4a <__SREG__+0xb>
		{
			PORTB=0b00001100;	//LF(B1)=0 LB(B2)=1 RF(B3)=1 RB(B4)=0
  92:	a8 bb       	out	0x18, r26	; 24
  94:	da cf       	rjmp	.-76     	; 0x4a <__SREG__+0xb>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
